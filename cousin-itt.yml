variant: fcos
version: 1.5.0

# Set up users (relying on SSH keys, no password hashes)
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE1AAAAIKSeJIOA8/AbB1q7WjgjW4E0o5uDRp95MKw6pjSgo8tM shaunchit@gmail.com" # Your primary key
        - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE1AAAAIPwwCTWMr1/EJt0zQ9U0nRBYyC5jvOrV1yaNYIlUCaP2 shaunchit@gmail.com" # Your Mac mini key
    - name: root # Root user exists but will not have a password set by Ignition
      # For root login, you would typically SSH as core, then 'sudo -i' or 'sudo su -'

# Section 1: Files and Directories to be created on the system
storage:
  files:
    # Set the hostname
    - path: /etc/hostname
      mode: 0644
      overwrite: true
      contents:
        inline: Cousin-Itt

    # Portainer Docker Compose file
    - path: /etc/docker/compose/portainer.yml
      mode: 0644
      contents:
        inline: |
          version: '3.8'
          services:
            portainer:
              image: portainer/portainer-ce:latest
              container_name: portainer
              restart: unless-stopped
              ports:
                - "9001:9000"
                - "9443:9443"
              volumes:
                - /run/podman/podman.sock:/var/run/docker.sock
                - /var/mnt/app-data/portainer:/data # Volume path updated to canonical path

  # Directories to be created for NFS mount points
  directories:
    - path: /var/mnt/media
      mode: 0755 # Standard permissions for mount points
      user:
        name: root
      group:
        name: root
    - path: /var/mnt/app-data
      mode: 0755 # Standard permissions for mount points
      user:
        name: root
      group:
        name: root

# Section 2: Systemd units for services, mounts, and first-boot setup
systemd:
  units:
    # --- NFS Mounts (UPDATED NAME TO MATCH /var/mnt/ CANONICAL PATH) ---
    - name: var-mnt-app-data.mount
      enabled: true
      contents: |
        [Unit]
        Description=Mount Synology App-Data Share
        After=network-online.target
        [Mount]
        What=172.16.100.2:/volume2/app-data
        Where=/var/mnt/app-data
        Type=nfs
        Options=defaults,noatime
        [Install]
        WantedBy=remote-fs.target

    - name: var-mnt-media.mount
      enabled: true
      contents: |
        [Unit]
        Description=Mount Synology Media Share
        After=network-online.target
        [Mount]
        What=172.16.100.2:/volume2/media
        Where=/var/mnt/media
        Type=nfs
        Options=defaults,noatime
        [Install]
        WantedBy=remote-fs.target

    # --- First-boot package installers & setup (will cause reboots) ---
    - name: install-qemu-guest-agent.service
      enabled: true
      contents: |
        [Unit]
        Description=Install QEMU Guest Agent
        ConditionPathExists=!/etc/qemu-guest-agent-installed
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rpm-ostree install qemu-guest-agent
        ExecStartPost=/usr/bin/touch /etc/qemu-guest-agent-installed
        ExecStartPost=/sbin/reboot
        [Install]
        WantedBy=multi-user.target

    - name: install-podman-compose.service
      enabled: true
      contents: |
        [Unit]
        Description=Install podman-compose
        ConditionPathExists=!/etc/podman-compose-installed
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rpm-ostree install podman-compose
        ExecStartPost=/usr/bin/touch /etc/podman-compose-installed
        ExecStartPost=/sbin/reboot
        [Install]
        WantedBy=multi-user.target

    # --- Install Cockpit Natively ---
    - name: install-cockpit.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Cockpit
        ConditionPathExists=!/etc/cockpit-installed
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rpm-ostree install cockpit
        ExecStartPost=/usr/bin/touch /etc/cockpit-installed
        ExecStartPost=/sbin/reboot
        [Install]
        WantedBy=multi-user.target

    # --- NEW: Enable Cockpit Socket and Firewall Rule After Installation ---
    - name: enable-cockpit.service
      enabled: true
      contents: |
        [Unit]
        Description=Enable and Start Cockpit Service After Installation
        After=network-online.target
        After=install-cockpit.service # For logical ordering, though Conditions handle actual run time
        [Service]
        Type=oneshot
        RemainAfterExit=yes # So the service stays 'active'
        ExecStart=/usr/bin/systemctl enable --now cockpit.socket # Enable and start the socket
        ExecStartPost=/usr/bin/firewall-cmd --zone=public --add-service=cockpit --permanent # Add firewall rule
        ExecStartPost=/usr/bin/firewall-cmd --reload # Reload firewall
        ExecStartPost=/usr/bin/touch /etc/cockpit-enabled # Marker file so it only runs once
        [Install]
        WantedBy=multi-user.target
      dropins:
        - name: 10-conditions.conf
          contents: |
            [Unit]
            ConditionPathExists=/etc/cockpit-installed # Only run if Cockpit package was installed
            ConditionPathExists=!/etc/cockpit-enabled  # Only run if Cockpit hasn't been enabled yet

    # --- Application Services (e.g., Portainer) ---
    - name: portainer.service
      enabled: true
      contents: |
        [Unit]
        Description=Run Portainer
        Wants=network-online.target var-mnt-app-data.mount
        After=network-online.target var-mnt-app-data.mount install-podman-compose.service install-cockpit.service enable-cockpit.service # Add dependency on cockpit enablement
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/usr/bin/podman-compose -f /etc/docker/compose/portainer.yml up -d
        ExecStop=/usr/bin/podman-compose -f /etc/docker/compose/portainer.yml down
        [Install]
        WantedBy=multi-user.target